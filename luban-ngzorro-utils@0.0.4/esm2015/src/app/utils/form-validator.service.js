import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FormValidatorModel } from '../models/form-validator.model';
import { RegexpUtils } from 'great-jsutils';
import * as i0 from "@angular/core";
let FormValidatorService = class FormValidatorService {
    constructor() {
    }
    /**
     * 验证是否全为中文
     * @param model:
     */
    chinese(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^[\u4e00-\u9fa5]+$/;
        return (control) => {
            if (!control.value) {
                return null;
            }
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 字母数字
     * @param model:
     */
    alphanumeric(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^[A-Za-z0-9]+$/;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 根据输入正则校验
     * @param model:
     */
    regex(model) {
        model = FormValidatorModel.init(model);
        const regExp = model.value;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 身份证
     * @param model:
     */
    identityCard(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 邮箱
     * @param model:
     */
    email(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 手机号
     * @param model:
     */
    mobile(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^[1][3,4,5,7,8][0-9]{9}$/;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * url
     * @param model:
     */
    url(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^((ht|f)tps?):\/\/([\w\-]+(\.[\w\-]+)*\/)*[\w\-]+(\.[\w\-]+)*\/?(\?([\w\-\.,@?^=%&:\/~\+#]*)+)?/;
        return (control) => {
            if (control.value && model.trimLR) {
                control.setValue(control.value.trim());
            }
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 整数
     * @param model:
     */
    integer(model) {
        model = FormValidatorModel.init(model);
        const regExp = /^\d+$/;
        return (control) => {
            const result = regExp.test(control.value);
            return this.buildReturnResult(result, model, control);
        };
    }
    /**
     * 数字验证
     * @param model:
     */
    decimal(model) {
        model = FormValidatorModel.init(model);
        return (control) => {
            let options = {};
            if (model.scale) {
                options = { scale: model.scale };
            }
            else if (model.maxScale) {
                options = { scale: model.maxScale };
            }
            if (model.min) {
                options = Object.assign({}, options, { min: model.min });
            }
            if (model.max) {
                options = Object.assign({}, options, { max: model.max });
            }
            const result = RegexpUtils.isNumber(control.value, options);
            return this.buildReturnResult(result, model, control);
        };
    }
    byteLength(model) {
        model = FormValidatorModel.init(model);
        return (control) => {
            if (!control.value) {
                return null;
            }
            let options = {};
            if (model.minLength) {
                options = { minLength: model.minLength };
            }
            else if (model.maxLength) {
                options = { maxLength: model.maxLength };
            }
            if (control.value && model.trimLR) {
                control.setValue(control.value.trim());
            }
            const result = RegexpUtils.byteLength(control.value, options);
            return this.buildReturnResult(result, model, control);
        };
    }
    buildReturnResult(regExpResult, model, control) {
        if (model.maxLength && regExpResult) {
            regExpResult = control.value.length <= model.maxLength;
        }
        if (model.minLength && regExpResult) {
            regExpResult = control.value.length >= model.minLength;
        }
        const defaultModel = model.defaultValue();
        if (regExpResult) {
            return null;
        }
        else {
            const result = {};
            const key = !!model.key ? model.key : defaultModel.key;
            const errorMsgKey = !!model.errorMsgKey ? model.errorMsgKey : defaultModel.errorMsgKey;
            const errorMsg = !!model.errorMsg ? model.errorMsg : defaultModel.errorMsg;
            result[key] = { value: control.value };
            if (model.errorMsgKey) {
                result[key][errorMsgKey] = errorMsg;
            }
            else {
                result[key][errorMsgKey] = errorMsg;
            }
            return result;
        }
    }
};
FormValidatorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FormValidatorService_Factory() { return new FormValidatorService(); }, token: FormValidatorService, providedIn: "root" });
FormValidatorService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [])
], FormValidatorService);
export { FormValidatorService };
//# sourceMappingURL=data:application/json;base64,